{"version":3,"sources":["utils/constants/roles.ts","redux/app/hook.ts","theme.ts","utils/constants/app-routes.ts","utils/axios/axios.ts","services/authService.ts","redux/features/auth/authSlice.ts","pages/AdminPage.tsx","pages/DealerDashboard.tsx","pages/HomePage.tsx","components/organizms/Login/LoginForm.tsx","components/templates/Login/LoginTemplate.tsx","pages/LoginPage.tsx","utils/HOC/PrivateRoute.tsx","utils/HOC/AuthRoutes.tsx","utils/HOC/PublicRoute.tsx","pages/ErrorPage.tsx","App.tsx","redux/app/store.ts","index.tsx"],"names":["Roles","useAppDispatch","useDispatch","useAppSelector","useSelector","theme","createTheme","AppRoutes","roles","view","path","isPrivate","exact","ADMIN","DEALER","isAuth","instance","axios","create","withCredentials","authService","autoLogin","get","then","data","catch","error","loginUser","createAsyncThunk","credentials","a","rejectWithValue","post","response","console","log","message","logoutUser","_","result","authReducer","createSlice","name","initialState","loading","role","isAuthenticated","username","reducers","extraReducers","builder","addCase","pending","state","action","fulfilled","localStorage","setItem","payload","rejected","String","removeItem","reducer","AdminPage","dispatch","history","useHistory","Button","onClick","push","style","textAlign","DealerDashboard","Home","to","useStyles","makeStyles","createStyles","root","btn","marginTop","spacing","LoginForm","useState","setUsername","password","setPassword","classes","Container","className","Typography","variant","align","onSubmit","e","preventDefault","TextField","fullWidth","placeholder","label","autoFocus","type","margin","required","value","onChange","target","color","height","display","alignItems","LoginTemplate","component","maxWidth","Login","PrivateRoute","props","Component","rest","AuthRoutes","PublicRoute","ErrorPage","App","MyRole","useEffect","ThemeProvider","allowedRoutes","filter","length","includes","map","route","views","generateRoutes","store","configureStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.24097b5c.chunk.js","sourcesContent":["export enum Roles {\n    ADMIN='admin',\n    DEALER='dealer'\n}","import { TypedUseSelectorHook, useDispatch, useSelector} from 'react-redux'\nimport { RootState, AppDispatch } from './store'\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\n","import { createTheme } from \"@material-ui/core\";\n\nconst theme = createTheme({\n\n})\n\nexport default theme","import { Roles } from \"./roles\";\nimport * as views from \"../../pages\";\n\ntype RoleTypes = Roles.ADMIN | Roles.DEALER;\ntype componentType = keyof typeof views;\n\ninterface AppRouteObj {\n  roles: RoleTypes[];\n  view: componentType;\n  path: string;\n  isPrivate: boolean;\n  exact: boolean;\n  isAuth?: boolean\n}\n\nconst AppRoutes: Array<AppRouteObj> = [\n  {\n    roles: [],\n    view: \"Home\",\n    path: \"/home\",\n    isPrivate: false,\n    exact: true,\n  },\n  {\n    roles: [Roles.ADMIN],\n    view: \"AdminPage\",\n    path: \"/admin/dashboard\",\n    isPrivate: true,\n    exact: true,\n  },\n  {\n    roles: [Roles.DEALER],\n    view: \"DealerDashboard\",\n    path: \"/dealer/dashboard\",\n    isPrivate: true,\n    exact: true,\n  },\n  {\n    roles: [],\n    view: \"Login\",\n    path: \"/login\",\n    isPrivate: false,\n    isAuth: true,\n    exact: true,\n  },\n];\n\nexport default AppRoutes;\n","import axios from \"axios\";\n\nconst instance = axios.create({\n  withCredentials: true,\n  // baseURL: process.env.REACT_APP_BASE_URL,\n});\n\n\nexport default instance;\n","import { axios } from \"utils/axios\";\n\nconst autoLogin = () => {\n  return axios\n    .get(\"/api/me\")\n    .then(({data}) => data)\n    .catch((error) => {\n      throw error;\n    });\n};\n\nconst authService = {\n  autoLogin,\n};\n\nexport default authService;\n","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport authService from \"services/authService\";\nimport { axios } from \"utils/axios\";\nimport { Roles } from \"utils/constants/roles\";\n\ninterface loginCredentials {\n  username: string;\n  password: string;\n}\n\ntype RoleTypes = Roles.ADMIN | Roles.DEALER;\ninterface authState {\n  loading: boolean;\n  error: string | null;\n  role: RoleTypes | null;\n  isAuthenticated: boolean;\n  username: string | null;\n}\n\nconst initialState: authState = {\n  loading: false,\n  error: null,\n  role: null,\n  isAuthenticated: false,\n  username: ''\n};\n\nexport const loginUser = createAsyncThunk(\n  \"auth/login\",\n  async (credentials: loginCredentials, { rejectWithValue }) => {\n    try {\n      const response = await axios.post(`/api/login`, credentials, {\n        withCredentials: true,\n      });\n      return response.data;\n    } catch (error) {\n      if (error.response) {\n        console.log(error.response);\n        return rejectWithValue(error.response.data.error);\n      } else {\n        return rejectWithValue(error.message);\n      }\n    }\n  }\n);\n\nexport const logoutUser = createAsyncThunk(\n  \"auth/logout\",\n  async (_, { rejectWithValue }) => {\n    console.log('pressed logout')\n    try {\n      await axios.get(\"/api/logout\");\n    } catch (error) {\n      if (error.response) {\n        console.log(error.response);\n        return rejectWithValue(error.response);\n      } else {\n        return rejectWithValue(error.message);\n      }\n    }\n  }\n);\n\nexport const autoLogin = createAsyncThunk(\"auth/autoLogin\", async () => {\n  try{\n    const result = await authService.autoLogin()\n    // if (result.isAuthenticated){\n      return result\n    // } \n  } catch(error) {\n    console.log(error)\n  }\n});\n\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    /** login */\n    builder.addCase(loginUser.pending, (state, action) => {\n      state.loading = true;\n    });\n    builder.addCase(loginUser.fulfilled, (state, action) => {\n      localStorage.setItem(\"USER_ROLE\", action.payload.role);\n      state.role = action.payload.role;\n      state.loading = false;\n      state.isAuthenticated = true\n    });\n    builder.addCase(loginUser.rejected, (state, action) => {\n      state.error = String(action.payload);\n      state.loading = false;\n      state.isAuthenticated = false\n    });\n    /** logout */\n    builder.addCase(logoutUser.fulfilled, (state, action) => {\n      console.log('logout fullfilled')\n      localStorage.removeItem(\"USER_ROLE\");\n      state.role = null;\n      state.isAuthenticated = false\n    });\n    builder.addCase(logoutUser.rejected, (state, action) => {\n      state.error = String(action.payload);\n      state.isAuthenticated = true\n    });\n    /** autoLogin */\n    builder.addCase(autoLogin.pending, (state) => {\n      state.loading = true\n    })\n    builder.addCase(autoLogin.fulfilled, (state, action)=> {\n      state.loading = false\n      state.isAuthenticated = action.payload.isAuthenticated\n      state.role = action.payload.role\n      state.username = action.payload.username\n    })\n    builder.addCase(autoLogin.rejected, (state) => {\n      state.isAuthenticated = false\n    })\n  },\n});\n\n// export const {  } = authSlice.actions;\nexport const { reducer: authReducer } = authSlice;\n","import { Button } from \"@material-ui/core\";\nimport React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useAppDispatch } from \"redux/app/hook\";\nimport { logoutUser } from \"redux/features/auth/authSlice\";\nimport { axios } from \"utils/axios\";\n\ninterface AdminProps {}\n\nexport const AdminPage: React.FC<AdminProps> = () => {\n  const dispatch = useAppDispatch();\n  const history = useHistory();\n\n  const handleLogout = () => {\n    dispatch(logoutUser()).then(() => history.push(\"/login\"));\n  };\n\n  const handleMe = () => {\n    axios.get('/api/me').then((data) => console.log(data))\n  }\n\n  return (\n    <div>\n      <Button onClick={handleLogout}>logout</Button>\n      <Button onClick={handleMe}>Me</Button>\n      <h1 style={{textAlign: \"center\"}}>Admin page</h1>\n    </div>\n  );\n};\n","import React from \"react\";\n\ninterface DealerDashboardProps {}\n\nexport const DealerDashboard: React.FC<DealerDashboardProps> = () => {\n  return <h1>Dealer dashboard</h1>;\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\ninterface HomeProps {}\n\nexport const Home: React.FC<HomeProps> = () => {\n  return (\n    <div>\n      <ul>\n        <li>\n          <Link to=\"/admin/dashboard/\">admin page</Link>\n        </li>\n        <li>\n          <Link to=\"/login\">Login</Link>\n        </li>\n      </ul>\n      <h1>HomePage</h1>\n    </div>\n  );\n};\n","import {\n  Button,\n  Container,\n  createStyles,\n  makeStyles,\n  TextField,\n  Theme,\n  Typography,\n} from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useAppDispatch, useAppSelector } from \"redux/app/hook\";\nimport { loginUser } from \"redux/features/auth/authSlice\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {},\n    btn: {\n      marginTop: theme.spacing(1),\n    },\n  })\n);\n\ninterface LoginFormProps {}\n\nexport const LoginForm: React.FC<LoginFormProps> = () => {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const classes = useStyles();\n\n  const dispatch = useAppDispatch();\n  const { error } = useAppSelector((state) => state.authReducer);\n\n  const handleLogin = (e: React.SyntheticEvent) => {\n    e.preventDefault();\n    const credentials = {\n      username,\n      password,\n    };\n    dispatch(loginUser(credentials));\n  };\n\n  return (\n    <Container className={classes.root}>\n      {error}\n      <Typography variant=\"h5\" align=\"center\">\n        Login\n      </Typography>\n      <form onSubmit={handleLogin}>\n        <TextField\n          fullWidth\n          variant=\"outlined\"\n          placeholder=\"Username\"\n          label=\"Username\"\n          autoFocus\n          type=\"text\"\n          margin=\"normal\"\n          required\n          value={username}\n          onChange={(e) => setUsername(e.target.value)}\n        />\n        <TextField\n          fullWidth\n          required\n          variant=\"outlined\"\n          placeholder=\"Password\"\n          label=\"Password\"\n          type=\"password\"\n          margin=\"normal\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n        />\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          type=\"submit\"\n          className={classes.btn}\n          fullWidth\n        >\n          Login\n        </Button>\n      </form>\n      <Button>\n          <Link to=\"/home\">Home</Link>\n      </Button>\n    </Container>\n  );\n};\n","import { Container } from \"@material-ui/core\";\nimport { createStyles, makeStyles } from \"@material-ui/core\";\nimport { LoginForm } from \"components/organizms/Login\";\nimport React from \"react\";\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    root: {\n      height: \"100vh\",\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n  })\n);\ninterface LoginTemplateProps {}\n\nexport const LoginTemplate: React.FC<LoginTemplateProps> = () => {\n  const classes = useStyles();\n  return (\n    <Container component=\"main\" maxWidth=\"xs\" className={classes.root}>\n      <LoginForm />\n    </Container>\n  );\n};\n","import React from \"react\";\nimport { LoginTemplate } from \"../components/templates/Login\";\n\ninterface LoginProps {}\n\nexport const Login: React.FC<LoginProps> = () => {\n  return <LoginTemplate />;\n};\n","import React from \"react\";\nimport { Redirect, Route } from \"react-router-dom\";\nimport { useAppSelector } from \"redux/app/hook\";\n\ninterface PrivateRouteProps {\n  component: React.FC;\n  [x: string]: any;\n}\n\nexport const PrivateRoute: React.FC<PrivateRouteProps> = (props) => {\n  const { component: Component, ...rest } = props;\n  const { isAuthenticated } = useAppSelector((state) => state.authReducer);\n\n  return (\n    <Route {...rest}>\n      {isAuthenticated ? <Component /> : <Redirect to=\"/login\" />}\n    </Route>\n  );\n};\n","import React from \"react\";\nimport { Redirect, Route } from \"react-router-dom\";\nimport { useAppSelector } from \"redux/app/hook\";\n\ninterface AuthRoutesProps {\n  component: React.FC;\n  [x: string]: any;\n}\n\nexport const AuthRoutes: React.FC<AuthRoutesProps> = (props) => {\n  const { component: Component, ...rest } = props;\n  const {isAuthenticated, role } = useAppSelector((state) => state.authReducer);\n\n  return (\n    <Route {...rest}>\n      {isAuthenticated ? <Redirect to={`/${role}/dashboard`} /> : <Component />}\n    </Route>\n  );\n};\n","import React from \"react\";\nimport { Route } from \"react-router-dom\";\n\ninterface PublicRouteProps {\n  component: React.FC;\n  [x: string]: any;\n}\n\nexport const PublicRoute: React.FC<PublicRouteProps> = ({\n  component: Component,\n  ...rest\n}) => {\n  return (\n    <Route {...rest}>\n      <Component />\n    </Route>\n  );\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\ninterface ErrorPageProps {}\n\nexport const ErrorPage: React.FC<ErrorPageProps> = () => {\n  return (\n    <div>\n      <ul>\n        <li>\n          <Link to=\"/home\">Home</Link>\n        </li>\n        <li>\n            <Link to=\"/login\">Login</Link>\n        </li>\n      </ul>\n      <h1 style={{color: \"red\"}}>Error page</h1>\n    </div>\n  );\n};\n","import { ThemeProvider } from \"@material-ui/core\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\nimport { useAppDispatch, useAppSelector } from \"redux/app/hook\";\nimport theme from \"theme\";\nimport AppRoutes from \"utils/constants/app-routes\";\nimport * as views from \"./pages\";\nimport { PrivateRoute } from \"utils/HOC/PrivateRoute\";\nimport { AuthRoutes } from \"utils/HOC/AuthRoutes\";\nimport { useEffect } from \"react\";\nimport { autoLogin } from \"redux/features/auth/authSlice\";\nimport { PublicRoute } from \"utils/HOC/PublicRoute\";\nimport \"App.css\";\nimport { ErrorPage } from \"pages/ErrorPage\";\n\nfunction App() {\n  const { role: MyRole, loading } = useAppSelector(\n    (state) => state.authReducer\n  );\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    dispatch(autoLogin());\n  }, [dispatch]);\n\n  if (loading) {\n    return <h1>...loading</h1>;\n  }\n\n  const getAllowedRoutes = () => {\n    return AppRoutes.filter(({ roles }) => {\n      // if route has no roles or there is my role and this role in routes' roles\n      if ((roles && roles.length === 0) || (MyRole && roles.includes(MyRole))) {\n        return true;\n      }\n      return false;\n    });\n  };\n\n  // generate only routes where user has permissions\n  const generateRoutes = () => {\n    const allowedRoutes = getAllowedRoutes();\n    console.log(allowedRoutes);\n    return allowedRoutes.map((route) => {\n      const { path, view, isPrivate, exact, isAuth } = route;\n\n      const component = views[view];\n      if (isPrivate) {\n        return (\n          <PrivateRoute\n            key={path}\n            path={path}\n            component={component}\n            exact={exact}\n          />\n        );\n      } else if (isAuth) {\n        return (\n          <AuthRoutes\n            key={path}\n            path={path}\n            component={component}\n            exact={exact}\n          />\n        );\n      }\n      return (\n        <PublicRoute\n          key={path}\n          path={path}\n          component={component}\n          exact={exact}\n        />\n      );\n    });\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Router>\n        <Switch>\n          <Route path=\"/\" exact>\n            <Redirect to=\"/home\" />\n          </Route>\n          {generateRoutes()}\n          <Route>\n            <ErrorPage />\n          </Route>\n        </Switch>\n      </Router>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit'\nimport { authReducer } from 'redux/features/auth/authSlice';\n\nconst reducer = {authReducer}\n\nexport const store = configureStore({\n    reducer,\n})\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { store } from \"redux/app/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}