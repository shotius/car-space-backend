{"version":3,"sources":["constants/roles.ts","redux/app/hook.ts","constants/app-routes.ts","utils/axios/axios.ts","services/authService.ts","redux/features/auth/authSlice.ts","pages/AdminPage.tsx","pages/DealerDashboard.tsx","pages/HomePage.tsx","components/atoms/Container/Container.tsx","components/molecules/FormikInput/FormikInput.tsx","components/organizms/LoginForm/LoginForm.tsx","components/templates/Login/LoginTemplate.tsx","pages/LoginPage.tsx","components/templates/Catalog/CatalogTemplate.tsx","pages/CatalogPage.tsx","utils/HOC/PrivateRoute.tsx","utils/HOC/AuthRoutes.tsx","utils/HOC/PublicRoute.tsx","pages/ErrorPage.tsx","App.tsx","redux/app/store.ts","index.tsx"],"names":["Roles","useAppDispatch","useDispatch","useAppSelector","useSelector","AppRoutes","roles","view","path","isPrivate","exact","ADMIN","DEALER","isAuth","instance","axios","create","withCredentials","authService","autoLogin","get","then","data","catch","error","loginUser","createAsyncThunk","credentials","a","rejectWithValue","post","response","console","log","message","logoutUser","_","result","authReducer","createSlice","name","initialState","loading","role","isAuthenticated","username","reducers","extraReducers","builder","addCase","pending","state","action","fulfilled","localStorage","setItem","payload","rejected","String","removeItem","reducer","AdminPage","dispatch","history","useHistory","onClick","push","style","textAlign","DealerDashboard","Home","to","CustomContainer","variant","children","rest","maxW","FormikInput","label","props","size","useField","field","isInvalid","htmlFor","LoginForm","initialValues","password","onSubmit","values","w","mb","spacing","placeholder","type","colorScheme","color","as","pl","LoginTemplate","h","Container","Login","CatalogTemplate","CatalogPage","PrivateRoute","Component","component","AuthRoutes","PublicRoute","ErrorPage","App","MyRole","useEffect","filter","length","includes","map","route","views","store","configureStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.476425de.chunk.js","sourcesContent":["export enum Roles {\n    ADMIN='admin',\n    DEALER='dealer'\n}","import { TypedUseSelectorHook, useDispatch, useSelector} from 'react-redux'\nimport { RootState, AppDispatch } from './store'\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\n","import { Roles } from \"./roles\";\nimport * as views from \"../pages\";\n\ntype RoleTypes = Roles.ADMIN | Roles.DEALER;\ntype componentType = keyof typeof views;\n\ninterface AppRouteObj {\n  roles: RoleTypes[];\n  view: componentType;\n  path: string;\n  isPrivate: boolean;\n  exact: boolean;\n  isAuth?: boolean\n}\n\nconst AppRoutes: Array<AppRouteObj> = [\n  {\n    roles: [],\n    view: \"Home\",\n    path: \"/home\",\n    isPrivate: false,\n    exact: true,\n  },\n  {\n    roles: [Roles.ADMIN],\n    view: \"AdminPage\",\n    path: \"/admin/dashboard\",\n    isPrivate: true,\n    exact: true,\n  },\n  {\n    roles: [Roles.DEALER],\n    view: \"DealerDashboard\",\n    path: \"/dealer/dashboard\",\n    isPrivate: true,\n    exact: true,\n  },\n  {\n    roles: [],\n    view: \"Login\",\n    path: \"/login\",\n    isPrivate: false,\n    isAuth: true,\n    exact: true,\n  },\n  {\n    roles: [],\n    view: \"CatalogPage\",\n    exact: true,\n    isPrivate: false,\n    isAuth: false,\n    path: \"/catalog\"\n  }\n];\n\nexport default AppRoutes;\n","import axios from \"axios\";\n\nconst instance = axios.create({\n  withCredentials: true,\n  // baseURL: process.env.REACT_APP_BASE_URL,\n});\n\n\nexport default instance;\n","import { axios } from \"utils/axios\";\n\nconst autoLogin = () => {\n  return axios\n    .get(\"/api/me\")\n    .then(({data}) => data)\n    .catch((error) => {\n      throw error;\n    });\n};\n\nconst authService = {\n  autoLogin,\n};\n\nexport default authService;\n","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport authService from \"services/authService\";\nimport { axios } from \"utils/axios\";\nimport { Roles } from \"constants/roles\";\n\ninterface loginCredentials {\n  username: string;\n  password: string;\n}\n\ntype RoleTypes = Roles.ADMIN | Roles.DEALER;\ninterface authState {\n  loading: boolean;\n  error: string | null;\n  role: RoleTypes | null;\n  isAuthenticated: boolean;\n  username: string | null;\n}\n\nconst initialState: authState = {\n  loading: false,\n  error: null,\n  role: null,\n  isAuthenticated: false,\n  username: ''\n};\n\nexport const loginUser = createAsyncThunk(\n  \"auth/login\",\n  async (credentials: loginCredentials, { rejectWithValue }) => {\n    try {\n      const response = await axios.post(`/api/login`, credentials, {\n        withCredentials: true,\n      });\n      return response.data;\n    } catch (error: any) {\n      if (error.response) {\n        console.log(error.response);\n        return rejectWithValue(error.response.data.error);\n      } else {\n        return rejectWithValue(error.message);\n      }\n    }\n  }\n);\n\nexport const logoutUser = createAsyncThunk(\n  \"auth/logout\",\n  async (_, { rejectWithValue }) => {\n    console.log('pressed logout')\n    try {\n      await axios.get(\"/api/logout\");\n    } catch (error: any) {\n      if (error.response) {\n        console.log(error.response);\n        return rejectWithValue(error.response);\n      } else {\n        return rejectWithValue(error.message);\n      }\n    }\n  }\n);\n\nexport const autoLogin = createAsyncThunk(\"auth/autoLogin\", async () => {\n  try{\n    const result = await authService.autoLogin()\n    // if (result.isAuthenticated){\n      return result\n    // } \n  } catch(error) {\n    console.log(error)\n  }\n});\n\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    /** login */\n    builder.addCase(loginUser.pending, (state, action) => {\n      state.loading = true;\n    });\n    builder.addCase(loginUser.fulfilled, (state, action) => {\n      localStorage.setItem(\"USER_ROLE\", action.payload.role);\n      state.role = action.payload.role;\n      state.loading = false;\n      state.isAuthenticated = true\n    });\n    builder.addCase(loginUser.rejected, (state, action) => {\n      state.error = String(action.payload);\n      state.loading = false;\n      state.isAuthenticated = false\n    });\n    /** logout */\n    builder.addCase(logoutUser.fulfilled, (state, action) => {\n      console.log('logout fullfilled')\n      localStorage.removeItem(\"USER_ROLE\");\n      state.role = null;\n      state.isAuthenticated = false\n    });\n    builder.addCase(logoutUser.rejected, (state, action) => {\n      state.error = String(action.payload);\n      state.isAuthenticated = true\n    });\n    /** autoLogin */\n    builder.addCase(autoLogin.pending, (state) => {\n      state.loading = true\n    })\n    builder.addCase(autoLogin.fulfilled, (state, action)=> {\n      state.loading = false\n      state.isAuthenticated = action.payload.isAuthenticated\n      state.role = action.payload.role\n      state.username = action.payload.username\n    })\n    builder.addCase(autoLogin.rejected, (state) => {\n      state.isAuthenticated = false\n    })\n  },\n});\n\n// export const {  } = authSlice.actions;\nexport const { reducer: authReducer } = authSlice;\n","import { Button } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useAppDispatch } from \"redux/app/hook\";\nimport { logoutUser } from \"redux/features/auth/authSlice\";\nimport { axios } from \"utils/axios\";\n\ninterface AdminProps {}\n\nexport const AdminPage: React.FC<AdminProps> = () => {\n  const dispatch = useAppDispatch();\n  const history = useHistory();\n\n  const handleLogout = () => {\n    dispatch(logoutUser()).then(() => history.push(\"/login\"));\n  };\n\n  const handleMe = () => {\n    axios.get('/api/me').then((data) => console.log(data))\n  }\n\n  return (\n    <div>\n      <Button onClick={handleLogout}>logout</Button>\n      <Button onClick={handleMe}>Me</Button>\n      <h1 style={{textAlign: \"center\"}}>Admin page</h1>\n    </div>\n  );\n};\n","import React from \"react\";\n\ninterface DealerDashboardProps {}\n\nexport const DealerDashboard: React.FC<DealerDashboardProps> = () => {\n  return <h1>Dealer dashboard</h1>;\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\ninterface HomeProps {}\n\nexport const Home: React.FC<HomeProps> = () => {\n  return (\n    <div>\n      <ul>\n        <li>\n          <Link to=\"/admin/dashboard/\">admin page</Link>\n        </li>\n        <li>\n          <Link to=\"/login\">Login</Link>\n        </li>\n      </ul>\n      <h1>HomePage</h1>\n    </div>\n  );\n};\n","import { Container, ContainerProps } from '@chakra-ui/layout';\nimport React from 'react';\n\ninterface Props {\n  variant: 'regular' | 'small';\n}\n\nconst CustomContainer: React.FC<Props & ContainerProps> = ({\n  variant,\n  children,\n  ...rest\n}) => {\n  return (\n    <Container maxW={variant === 'regular' ? '700px' : '400px'} {...rest}>\n      {children}\n    </Container>\n  );\n};\n\nexport default CustomContainer\n","import {\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Input,\n} from '@chakra-ui/react';\nimport { useField } from 'formik';\nimport React, { InputHTMLAttributes } from 'react';\n\ntype InputFieldProps = InputHTMLAttributes<HTMLInputElement> & {\n  name: string;\n  label: string;\n};\n\nexport const FormikInput: React.FC<InputFieldProps> = ({\n  label,\n  size: _,\n  ...props\n}) => {\n  const [field, { error }] = useField(props);\n  return (\n    <FormControl isInvalid={!!error}>\n      <FormLabel htmlFor={field.name}>{label}</FormLabel>\n      <Input {...field} {...props} />\n      {error ? <FormErrorMessage>{error}</FormErrorMessage> : null}\n    </FormControl>\n  );\n};\n","import { Button } from '@chakra-ui/button';\nimport { Flex, Heading, Text, VStack } from '@chakra-ui/layout';\nimport { FormikInput } from 'components/molecules/FormikInput/FormikInput';\nimport { Form, Formik } from 'formik';\nimport React from 'react';\nimport { Link as RouteLink } from 'react-router-dom';\nimport { useAppDispatch } from \"redux/app/hook\";\nimport { loginUser } from \"redux/features/auth/authSlice\";\n\ninterface LoginFormProps {}\n\nexport const LoginForm: React.FC<LoginFormProps> = () => {\n  const dispatch = useAppDispatch();\n\n  return (\n    <Formik\n      initialValues={{ username: '', password: '' }}\n      onSubmit={(values) => {\n        const credentials = {\n          username: values.username,\n          password: values.password,\n        };\n        dispatch(loginUser(credentials));\n      }}\n    >\n      {() => (\n        <Form>\n          <Heading w=\"full\" textAlign=\"center\" mb={4}>\n            Login\n          </Heading>\n          <VStack spacing={4}>\n            <FormikInput name=\"username\" label=\"Username\" placeholder=\"username\"/>\n            <FormikInput name=\"password\" label=\"Password\" placeholder=\"password\" type=\"password\"/>\n            <Button variant=\"solid\" w=\"full\" colorScheme=\"blue\" type=\"submit\">\n              Login\n            </Button>\n            <Flex color=\"gray.500\" as=\"sub\">\n              <Text>if you aren't car dealer or an admin go to </Text>\n              <Text color=\"blue.500\" as=\"u\" pl={1}>\n                <RouteLink to=\"/home\">Home</RouteLink>\n              </Text>\n            </Flex>\n          </VStack>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n","import { Center } from '@chakra-ui/layout';\nimport { Container } from 'components/atoms/Container';\nimport { LoginForm } from 'components/organizms/LoginForm';\nimport React from 'react';\n\ninterface LoginTemplateProps {}\n\nexport const LoginTemplate: React.FC<LoginTemplateProps> = () => {\n  return (\n    <Center h=\"100vh\">\n      <Container variant=\"small\" >\n        <LoginForm />\n      </Container>\n    </Center>\n  );\n};\n","import { LoginTemplate } from \"components/templates/Login\";\nimport React from \"react\";\n\ninterface LoginProps {}\n\nexport const Login: React.FC<LoginProps> = () => {\n  return <LoginTemplate />;\n};\n","import React from 'react';\n\ninterface CatalogTemplateProps {}\n\nexport const CatalogTemplate: React.FC<CatalogTemplateProps> = () => {\n  return <div>Catalog</div>;\n};\n","import { CatalogTemplate } from 'components/templates/Catalog';\nimport React from 'react';\n\ninterface CatalogPageProps {}\n\nexport const CatalogPage: React.FC<CatalogPageProps> = () => {\n  return <CatalogTemplate />;\n};\n\n","import React from \"react\";\nimport { Redirect, Route } from \"react-router-dom\";\nimport { useAppSelector } from \"redux/app/hook\";\n\ninterface PrivateRouteProps {\n  component: React.FC;\n  [x: string]: any;\n}\n\nexport const PrivateRoute: React.FC<PrivateRouteProps> = (props) => {\n  const { component: Component, ...rest } = props;\n  const { isAuthenticated } = useAppSelector((state) => state.authReducer);\n\n  return (\n    <Route {...rest}>\n      {isAuthenticated ? <Component /> : <Redirect to=\"/login\" />}\n    </Route>\n  );\n};\n","import React from \"react\";\nimport { Redirect, Route } from \"react-router-dom\";\nimport { useAppSelector } from \"redux/app/hook\";\n\ninterface AuthRoutesProps {\n  component: React.FC;\n  [x: string]: any;\n}\n\nexport const AuthRoutes: React.FC<AuthRoutesProps> = (props) => {\n  const { component: Component, ...rest } = props;\n  const {isAuthenticated, role } = useAppSelector((state) => state.authReducer);\n\n  return (\n    <Route {...rest}>\n      {isAuthenticated ? <Redirect to={`/${role}/dashboard`} /> : <Component />}\n    </Route>\n  );\n};\n","import React from \"react\";\nimport { Route } from \"react-router-dom\";\n\ninterface PublicRouteProps {\n  component: React.FC;\n  [x: string]: any;\n}\n\nexport const PublicRoute: React.FC<PublicRouteProps> = ({\n  component: Component,\n  ...rest\n}) => {\n  return (\n    <Route {...rest}>\n      <Component />\n    </Route>\n  );\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\ninterface ErrorPageProps {}\n\nexport const ErrorPage: React.FC<ErrorPageProps> = () => {\n  return (\n    <div>\n      <ul>\n        <li>\n          <Link to=\"/home\">Home</Link>\n        </li>\n        <li>\n            <Link to=\"/login\">Login</Link>\n        </li>\n      </ul>\n      <h1 style={{color: \"red\"}}>Error page</h1>\n    </div>\n  );\n};\n","import {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom';\nimport { useAppDispatch, useAppSelector } from 'redux/app/hook';\nimport AppRoutes from 'constants/app-routes';\nimport * as views from './pages';\nimport { PrivateRoute } from 'utils/HOC/PrivateRoute';\nimport { AuthRoutes } from 'utils/HOC/AuthRoutes';\nimport { useEffect } from 'react';\nimport { autoLogin } from 'redux/features/auth/authSlice';\nimport { PublicRoute } from 'utils/HOC/PublicRoute';\nimport 'App.css';\nimport { ErrorPage } from 'pages/ErrorPage';\n\nfunction App() {\n  const { role: MyRole, loading } = useAppSelector(\n    (state) => state.authReducer\n  );\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    dispatch(autoLogin());\n  }, [dispatch]);\n\n  if (loading) {\n    return <h1>...loading</h1>;\n  }\n\n  const getAllowedRoutes = () => {\n    return AppRoutes.filter(({ roles }) => {\n      // if route has no roles or there is my role and this role in routes' roles\n      if ((roles && roles.length === 0) || (MyRole && roles.includes(MyRole))) {\n        return true;\n      }\n      return false;\n    });\n  };\n\n  // generate only routes where user has permissions\n  const generateRoutes = () => {\n    const allowedRoutes = getAllowedRoutes();\n    return allowedRoutes.map((route) => {\n      const { path, view, isPrivate, exact, isAuth } = route;\n\n      const component = views[view];\n      if (isPrivate) {\n        return (\n          <PrivateRoute\n            key={path}\n            path={path}\n            component={component}\n            exact={exact}\n          />\n        );\n      } else if (isAuth) {\n        return (\n          <AuthRoutes\n            key={path}\n            path={path}\n            component={component}\n            exact={exact}\n          />\n        );\n      }\n      return (\n        <PublicRoute\n          key={path}\n          path={path}\n          component={component}\n          exact={exact}\n        />\n      );\n    });\n  };\n\n  return (\n      <Router>\n        <Switch>\n          <Route path=\"/\" exact>\n            <Redirect to=\"/home\" />\n          </Route>\n          {generateRoutes()}\n          <Route>\n            <ErrorPage />\n          </Route>\n        </Switch>\n      </Router>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit'\nimport { authReducer } from 'redux/features/auth/authSlice';\n\nconst reducer = {authReducer}\n\nexport const store = configureStore({\n    reducer,\n})\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { store } from 'redux/app/store';\nimport { Provider } from 'react-redux';\nimport { ChakraProvider } from '@chakra-ui/react';\n\nReactDOM.render(\n  <Provider store={store}>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}